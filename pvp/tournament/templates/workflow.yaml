{{- if eq .Values.mode "tournament" }}
apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: pvp-{{ .Values.tournament }}-
spec:
  imagePullSecrets:
  - name: qcloudregistrykey
  - name: regcred
  ttlStrategy:
    secondsAfterCompletion: 1800
    secondsAfterFailure: 1800
    secondsAfterSuccess: 1800
  #podGC:
  #  strategy: OnWorkflowSuccess
  activeDeadlineSeconds: 900
  entrypoint: pvp
  templates:
  - name: pvp
    steps:
    - - name: schedule-matches
        template: schedule-matches
    - - name: run-match
        template: run-match
        arguments:
          parameters:
          - name: match
            value: "{{`{{item}}`}}"
        withParam: "{{`{{steps.schedule-matches.outputs.parameters.next-matches}}`}}"

  - name: run-match
    inputs:
      parameters:
      - name: match
    dag:
      tasks:
      - name: rollout
        template: rollout
      - name: submission
        template: submission
        depends: rollout
        arguments:
          parameters:
          - name: submission-id
            value: "{{`{{item}}`}}"
          - name: rollout-ip
            value: "{{`{{tasks.rollout.ip}}`}}"
        withParam: "{{`{{inputs.parameters.match}}`}}"
      - name: daemon
        template: daemon
        depends: rollout
        arguments:
          parameters:
          - name: rollout-ip
            value: "{{`{{tasks.rollout.ip}}`}}"

  - name: schedule-matches
    nodeSelector:
      nmmo/main: "1"
    container:
      image: hkccr.ccs.tencentyun.com/neurips2022nmmo/evaluator:{{ .Values.version }}
      imagePullPolicy: Always
      command:
      - bash
      - -c
      args:
      - |2
        export PYTHONPATH=${PYTHONPATH}:/home/aicrowd
        python -u pvp/schedule_matches.py
      env:
      {{- range $key, $value := $.Values.scheduleMatches.env }}
      - name: {{ $key }}
        value: {{ tpl $value $ | quote }}
      {{- end }}
      volumeMounts:
      - name: shared-disk
        subPath: pvp/{{ .Values.tournament }}
        mountPath: /shared
    outputs:
      parameters:
      - name: next-matches
        valueFrom:
          path: /tmp/next-matches
    volumes:
    - name: shared-disk
      nfs:
        server: 192.168.224.15
        path: /ru6a4tgh

  - name: rollout
    daemon: true
    nodeSelector:
      node-group: pvp
    tolerations:
    - key: node-group
      value: pvp
    container:
      image: hkccr.ccs.tencentyun.com/neurips2022nmmo/evaluator:{{ .Values.version }}
      imagePullPolicy: Always
      resources:
        requests:
          cpu: 1
          memory: 5Gi
        limits:
          cpu: 1
          memory: 5Gi
      command:
      - bash
      - -c
      args:
      - |2
        nohup python -m http.server 12344 1>httpserver.log 2>&1 &
        export PYTHONPATH=${PYTHONPATH}:/home/aicrowd
        python -u pvp/rollout.py
      env:
      {{- range $key, $value := $.Values.runMatch.rollout.env }}
      - name: {{ $key }}
        value: {{ tpl $value $ | quote }}
      {{- end }}
      volumeMounts:
      - name: shared-disk
        subPath: pvp/{{ .Values.tournament }}
        mountPath: /shared
    volumes:
    - name: shared-disk
      nfs:
        server: 192.168.224.15
        path: /ru6a4tgh

  - name: submission
    daemon: true
    inputs:
      parameters:
      - name: submission-id
      - name: rollout-ip
    nodeSelector:
      node-group: pvp
    tolerations:
    - key: node-group
      value: pvp
    container:
      image: "aicrowd/neural-mmo:{{`{{inputs.parameters.submission-id}}`}}"
      imagePullPolicy: IfNotPresent
      resources:
        requests:
          cpu: 1
          memory: 1Gi
        limits:
          cpu: 1
          memory: 2Gi
      command:
      - bash
      - -c
      args:
      - |2
        echo """
        import os
        import pickle
        import traceback
        from loguru import logger
        from neurips2022nmmo import submission as subm
        from neurips2022nmmo import CompetitionConfig
        from aicrowd_gym.serializers.base import BaseSerializer
        from aicrowd_gym.clients.zmq_oracle_client import ZmqOracleClient
        
        
        class PickleSerializer(BaseSerializer):
            def __init__(self):
                self.content_type = 'application/octet-stream'
        
            def raw_encode(self, data):
                return pickle.dumps(data)
        
            def raw_decode(self, data):
                return pickle.loads(data)
        
        
        class Constants:
            SERVER_HOST = os.getenv('AICROWD_REMOTE_SERVER_HOST', '0.0.0.0')
            SERVER_PORT = int(os.getenv('AICROWD_REMOTE_SERVER_PORT', '5000'))
            SUBMISSION_ID = os.getenv('AICROWD_SUBMISSION_ID', '00000')
            SUBMISSION_PATH = os.getenv('AICROWD_SUBMISSION_PATH', 'submissions/random')
            ERRLOG_DIR = os.getenv('ERRLOG_DIR', '/errlog')
            assert SUBMISSION_PATH
            MODE: str = os.getenv('NMMO_MODE')
        
        
        def main():
            os.environ['MKL_NUM_THREADS'] = '1'
            os.environ['OMP_NUM_THREADS'] = '1'
        
            if Constants.MODE in ['PVE_STAGE1_VALIDATION', 'PVE_STAGE2_VALIDATION']:
                logger.info('validation, return')
                return
        
            subm.check(Constants.SUBMISSION_PATH)
            logger.info('Check submission done')
        
            team = subm.get_team_from_submission(Constants.SUBMISSION_PATH,
                                                 Constants.SUBMISSION_ID,
                                                 CompetitionConfig())
            logger.info(f'Get team {team.__class__.__name__} done')
        
            client = ZmqOracleClient(
                host=Constants.SERVER_HOST,
                port=Constants.SERVER_PORT,
                serializer=PickleSerializer(),
            )
            client.register_agent(agent=team,
                                  metadata={
                                      'team_id': team.id,
                                      'policy_id': Constants.SUBMISSION_ID,
                                      'submission_id': Constants.SUBMISSION_ID
                                  })
            logger.info('Register agent done')
        
            logger.info('Run team')
            client.run_agent()
        
            logger.info('Close, bye.')
        
        
        if __name__ == '__main__':
            try:
                main()
            except:
                exc = traceback.format_exc()
                with open(os.path.join(Constants.ERRLOG_DIR, os.getenv('HOSTNAME')), 'w') as fp:
                    fp.write(exc)
                import time
                time.sleep(7)
                raise
        """ > run_team.py
        echo """
        #!/bin/bash

        while true
        do
            pip install -U -q 'http://aicrowd-gym-pypi.default:12345/aicrowd_gym_internal-0.0.5-py3-none-any.whl' 
            python -c 'import aicrowd_gym; print(aicrowd_gym)'
            if [ $? -eq 0 ]
            then
                echo 'pip install done.'
                break
            fi
            echo 'pip install failed.'
        done
        
        python run_team.py

        """ > run.sh
        bash run.sh
      env:
      {{- range $key, $value := $.Values.runMatch.submission.env }}
      - name: {{ $key }}
        value: {{ tpl $value $ | quote }}
      {{- end }}
      - name: AICROWD_REMOTE_SERVER_HOST
        value: "{{`{{inputs.parameters.rollout-ip}}`}}"
      - name: AICROWD_SUBMISSION_ID
        value: "{{`{{inputs.parameters.submission-id}}`}}"
      volumeMounts:
      - name: shared-disk
        subPath: "pvp/{{ .Values.tournament }}/errlog/{{`{{inputs.parameters.submission-id}}`}}"
        mountPath: /errlog
    volumes:
    - name: shared-disk
      nfs:
        server: 192.168.224.15
        path: /ru6a4tgh

  - name: daemon
    inputs:
      parameters:
      - name: rollout-ip
    nodeSelector:
      node-group: pvp
    tolerations:
    - key: node-group
      value: pvp
    container:
      image: python:3.9.6
      imagePullPolicy: IfNotPresent
      command:
      - bash
      - -c
      args:
      - |2
        errcnt=0
        while true
        do
            curl {{`{{inputs.parameters.rollout-ip}}`}}:12344 -m 1 1>curl.log 2>&1
            if [[ $? -ne 0 ]]; then
                errcnt=$(( $errcnt + 1 ))
                echo "curl failed. errcnt: ${errcnt}"
                cat curl.log
            else
                errcnt=0
            fi

            if [[ $errcnt -ge 3 ]]; then
                echo "bye"
                break
            fi

            sleep 5
        done
{{- end }}
